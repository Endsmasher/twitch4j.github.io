"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5509],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},b=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),b=u(n),d=i,m=b["".concat(s,".").concat(d)]||b[d]||p[d]||r;return n?a.createElement(m,l(l({ref:t},c),{},{components:n})):a.createElement(m,l({ref:t},c))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=b;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var u=2;u<r;u++)l[u]=n[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.r(t),n.d(t,{default:()=>l});var a=n(7294),i=n(6010);const r="tabItem_Ymn6";function l(e){let{children:t,hidden:n,className:l}=e;return a.createElement("div",{role:"tabpanel",className:(0,i.Z)(r,l),hidden:n},t)}},5488:(e,t,n)=>{n.r(t),n.d(t,{default:()=>d});var a=n(7462),i=n(7294),r=n(6010),l=n(2389),o=n(7392),s=n(7094),u=n(2466);const c="tabList__CuJ",p="tabItem_LNqP";function b(e){var t,n;const{lazy:l,block:b,defaultValue:d,values:m,groupId:h,className:v}=e,f=i.Children.map(e.children,(e=>{if((0,i.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),k=null!=m?m:f.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),g=(0,o.l)(k,((e,t)=>e.value===t.value));if(g.length>0)throw new Error('Docusaurus error: Duplicate values "'+g.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const y=null===d?d:null!=(t=null!=d?d:null==(n=f.find((e=>e.props.default)))?void 0:n.props.value)?t:f[0].props.value;if(null!==y&&!k.some((e=>e.value===y)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+y+'" but none of its children has the corresponding value. Available values are: '+k.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:w,setTabGroupChoices:N}=(0,s.U)(),[T,S]=(0,i.useState)(y),P=[],{blockElementScrollPositionUntilNextRender:E}=(0,u.o5)();if(null!=h){const e=w[h];null!=e&&e!==T&&k.some((t=>t.value===e))&&S(e)}const x=e=>{const t=e.currentTarget,n=P.indexOf(t),a=k[n].value;a!==T&&(E(t),S(a),null!=h&&N(h,String(a)))},C=e=>{var t;let n=null;switch(e.key){case"ArrowRight":{var a;const t=P.indexOf(e.currentTarget)+1;n=null!=(a=P[t])?a:P[0];break}case"ArrowLeft":{var i;const t=P.indexOf(e.currentTarget)-1;n=null!=(i=P[t])?i:P[P.length-1];break}}null==(t=n)||t.focus()};return i.createElement("div",{className:(0,r.Z)("tabs-container",c)},i.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":b},v)},k.map((e=>{let{value:t,label:n,attributes:l}=e;return i.createElement("li",(0,a.Z)({role:"tab",tabIndex:T===t?0:-1,"aria-selected":T===t,key:t,ref:e=>P.push(e),onKeyDown:C,onFocus:x,onClick:x},l,{className:(0,r.Z)("tabs__item",p,null==l?void 0:l.className,{"tabs__item--active":T===t})}),null!=n?n:t)}))),l?(0,i.cloneElement)(f.filter((e=>e.props.value===T))[0],{className:"margin-top--md"}):i.createElement("div",{className:"margin-top--md"},f.map(((e,t)=>(0,i.cloneElement)(e,{key:t,hidden:e.props.value!==T})))))}function d(e){const t=(0,l.Z)();return i.createElement(b,(0,a.Z)({key:String(t)},e))}},9089:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>u,toc:()=>p});var a=n(7462),i=(n(7294),n(3905)),r=n(5488),l=n(5162);const o={sidebar_position:15},s="PubSub",u={unversionedId:"pubsub/index",id:"version-1.x/pubsub/index",title:"PubSub",description:"PubSub enables you to subscribe to a topic, for updates (e.g., when a user cheers on a channel).",source:"@site/versioned_docs/version-1.x/pubsub/index.mdx",sourceDirName:"pubsub",slug:"/pubsub/",permalink:"/pubsub/",draft:!1,editUrl:"https://github.com/twitch4j/twitch4j.github.io/tree/master/docs/versioned_docs/version-1.x/pubsub/index.mdx",tags:[],version:"1.x",lastUpdatedBy:"Philipp Heuer",lastUpdatedAt:1660511578,formattedLastUpdatedAt:"Aug 14, 2022",sidebarPosition:15,frontMatter:{sidebar_position:15},sidebar:"version-1.x-docs",previous:{title:"User - Unfollow",permalink:"/graphql/user-unfollow"},next:{title:"Topic - Bits Badge Unlocks",permalink:"/pubsub/topic-bits-badge-unlocks"}},c={},p=[{value:"As Module: Twitch4J",id:"as-module-twitch4j",level:2},{value:"Standalone",id:"standalone",level:2},{value:"Handle the Results",id:"handle-the-results",level:2},{value:"Available Topics",id:"available-topics",level:2},{value:"Official",id:"official",level:3},{value:"Unofficial",id:"unofficial",level:3},{value:"Unsubscribing",id:"unsubscribing",level:2},{value:"Rate-limits",id:"rate-limits",level:2}],b={toc:p};function d(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},b,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"pubsub"},"PubSub"),(0,i.kt)("p",null,"PubSub enables you to subscribe to a topic, for updates (e.g., when a user cheers on a channel)."),(0,i.kt)("p",null,"The Twitch PubSub system allows back-end services to broadcast realtime messages to clients. Example applications include:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"An instant messaging service sending instant messages between friends."),(0,i.kt)("li",{parentName:"ul"},"A back-end video system pushing real-time viewer count updates to video players."),(0,i.kt)("li",{parentName:"ul"},"A presence system broadcasting users\u2019 online status to all their friends.")),(0,i.kt)("h2",{id:"as-module-twitch4j"},"As Module: Twitch4J"),(0,i.kt)("p",null,"To use PubSub you need to enable the PubSub when building the Twitch4J Instance, as shown below:"),(0,i.kt)(r.default,{groupId:"code",mdxType:"Tabs"},(0,i.kt)(l.default,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"TwitchClient twitchClient = TwitchClientBuilder.builder()\n    ...\n    .withEnablePubSub(true)\n    ...\n    .build();\n"))),(0,i.kt)(l.default,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"val twitchClient = TwitchClientBuilder.builder()\n    ...\n    .withEnablePubSub(true)\n    ...\n    .build()\n"))),(0,i.kt)(l.default,{value:"groovy",label:"Groovy",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-groovy"},"def twitchClient = TwitchClientBuilder.builder()\n    ...\n    .withEnablePubSub(true)\n    ...\n    .build()\n")))),(0,i.kt)("h2",{id:"standalone"},"Standalone"),(0,i.kt)("p",null,"Initialize the PubSub as Standalone Module:"),(0,i.kt)(r.default,{groupId:"code",mdxType:"Tabs"},(0,i.kt)(l.default,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"TwitchPubSub client = TwitchPubSubBuilder.builder().build();\n"))),(0,i.kt)(l.default,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"val client = TwitchPubSubBuilder.builder().build();\n"))),(0,i.kt)(l.default,{value:"groovy",label:"Groovy",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-groovy"},"def client = TwitchPubSubBuilder.builder().build();\n")))),(0,i.kt)("h2",{id:"handle-the-results"},"Handle the Results"),(0,i.kt)("p",null,"Messages received over PubSub will be dispatched using the EventManager, please see the Twitch4J -> Events Documentation on how to listen for events or check out the individual pages below for specific code samples."),(0,i.kt)("h2",{id:"available-topics"},"Available Topics"),(0,i.kt)("p",null,"In PubSub Context you subscribe to topics, a topic is for example ",(0,i.kt)("inlineCode",{parentName:"p"},"whispers to user twitch4j")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"subscriptions in channel twitch4j"),"."),(0,i.kt)("p",null,"Note that nearly all of the pubsub topics rely upon the user ID to subscribe to them, rather than the user name. See API - Helix -> Users Get, if one needs to convert between the two."),(0,i.kt)("p",null,"Here is a list of available topics along with code samples:"),(0,i.kt)("h3",{id:"official"},"Official"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"./topic-bits-badge-unlocks"},"Bits Badge Unlocks")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"./topic-bits-events"},"Bits Events")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"./topic-channel-points-events"},"Channel Points Events")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"./topic-commerce-events"},"Commerce Events (Deprecated)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"./topic-moderation-events"},"Moderation Events")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"./topic-subscribe-events"},"Subscribe Events")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"./topic-whispers"},"Whispers"))),(0,i.kt)("h3",{id:"unofficial"},"Unofficial"),(0,i.kt)("p",null,"Disclaimer: Use at your own risk after understanding the ",(0,i.kt)("a",{parentName:"p",href:"https://twitch.tv/p/legal/developer-agreement"},"Twitch Developer Agreement"),".\nThese topics may break at any time and there is no guarantee of support.\nThe authors of the Twitch4J library assume no responsibility for your actions."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"./topic-following-events"},"Following Events")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"./topic-friendship-events"},"Friendship Events")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"./topic-hype-train-events"},"Hype Train Events")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"./topic-hype-train-rewards"},"Hype Train Rewards")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"./topic-leaderboard-events"},"Leaderboard Events")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"./topic-onsite-notifications"},"Onsite Notifications")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"./topic-poll-events"},"Poll Events")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"./topic-presence-events"},"Presence Events")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"./topic-public-cheer-events"},"Public Cheer Events")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"./topic-raid-events"},"Raid Events")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"./topic-sub-gift-events"},"Sub Gift Events")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"./topic-user-community-points-events"},"User Community Points Events")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"./topic-video-playback-events"},"Video Playback Events"))),(0,i.kt)("p",null,"We hope Twitch will document these topics as there is no official way to get much of this data, and they could be used for creating powerful integrations."),(0,i.kt)("h2",{id:"unsubscribing"},"Unsubscribing"),(0,i.kt)("p",null,"Once a topic is no longer relevant, one can unsubscribe from it to stop receiving further events of that type."),(0,i.kt)(r.default,{groupId:"code",mdxType:"Tabs"},(0,i.kt)(l.default,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"// Initial subscription\nPubSubSubscription subscription = twitchClient.getPubSub().listenForWhisperEvents(credential, userId);\n\n// Later unsubscription\ntwitchClient.getPubSub().unsubscribeFromTopic(subscription);\n"))),(0,i.kt)(l.default,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"// Initial subscription\nval subscription = twitchClient.pubSub.listenForWhisperEvents(credential, userId)\n\n// Later unsubscription\ntwitchClient.pubSub.unsubscribeFromTopic(subscription)\n"))),(0,i.kt)(l.default,{value:"groovy",label:"Groovy",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-groovy"},"// Initial subscription\ndef subscription = twitchClient.pubSub.listenForWhisperEvents(credential, userId)\n\n// Later unsubscription\ntwitchClient.pubSub.unsubscribeFromTopic(subscription)\n")))),(0,i.kt)("h2",{id:"rate-limits"},"Rate-limits"),(0,i.kt)("p",null,"A single ",(0,i.kt)("inlineCode",{parentName:"p"},"TwitchPubSub")," instance may only be subscribed to up to 50 topics at a time, under Twitch's ",(0,i.kt)("a",{parentName:"p",href:"https://dev.twitch.tv/docs/pubsub#api-limits"},"default limits"),".\nThis yields another reason to unsubscribe from irrelevant topics; it creates headroom for other topics."),(0,i.kt)("p",null,"If still more headroom is needed, one can construct additional ",(0,i.kt)("inlineCode",{parentName:"p"},"TwitchPubSub")," instances, each with a limit of 50 topics.\nTwitch ",(0,i.kt)("em",{parentName:"p"},"recommends")," no greater than 10 pubsub connections be made from a single IP (each ",(0,i.kt)("inlineCode",{parentName:"p"},"TwitchPubSub")," instance is equivalent to a single connection), but this is not a hard limit."),(0,i.kt)("p",null,"To simplify this, we offer ",(0,i.kt)("inlineCode",{parentName:"p"},"TwitchPubSubConnectionPool")," as a class that can abstract away the creation/deletion of additional PubSub connections for you:"),(0,i.kt)(r.default,{groupId:"code",mdxType:"Tabs"},(0,i.kt)(l.default,{value:"java",label:"Java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"// Create a dynamically-sized connection pool\nTwitchPubSubConnectionPool pool = TwitchPubSubConnectionPool.builder()\n    .maxSubscriptionsPerConnection(50)\n    .build();\n\n// Register our listener(s)\npool.getEventManager().onEvent(ChatModerationEvent.class, System.out::println);\n\n// Define our requests (that can exceed 50 in count)\nPubSubRequest req1 = ... ;\nPubSubRequest req2 = ... ;\nPubSubRequest req3 = ... ;\n\n// Subscribe to topics\nPubSubSubscription resp1 = pool.subscribe(req1);\nPubSubSubscription resp2 = pool.subscribe(req2);\nPubSubSubscription resp3 = pool.subscribe(req3);\n\n// Later, can unsubscribe from any\npool.unsubscribe(resp2);\n"))),(0,i.kt)(l.default,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"// Create a dynamically-sized connection pool\nval pool = TwitchPubSubConnectionPool.builder()\n    .maxSubscriptionsPerConnection(50)\n    .build();\n\n// Register our listener(s)\npool.eventManager.onEvent(ChatModerationEvent::class.java, System.out::println);\n\n// Define our requests (that can exceed 50 in count)\nvar req1: PubSubRequest = ...\nvar req2: PubSubRequest = ...\nvar req3: PubSubRequest = ...\n\n// Subscribe to topics\nval resp1: PubSubSubscription = pool.subscribe(req1)\nval resp2: PubSubSubscription = pool.subscribe(req2)\nval resp3: PubSubSubscription = pool.subscribe(req3)\n\n// Later, can unsubscribe from any\npool.unsubscribe(resp2);\n"))),(0,i.kt)(l.default,{value:"groovy",label:"Groovy",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-groovy"},"// Create a dynamically-sized connection pool\ndef pool = TwitchPubSubConnectionPool.builder()\n    .maxSubscriptionsPerConnection(50)\n    .build();\n\n// Register our listener(s)\npool.eventManager.onEvent(ChatModerationEvent) { System.out.println(it) }\n\n// Define our requests (that can exceed 50 in count)\nPubSubRequest req1 = ...\nPubSubRequest req2 = ...\nPubSubRequest req3 = ...\n\n// Subscribe to topics\nPubSubSubscription resp1 = pool.subscribe(req1)\nPubSubSubscription resp2 = pool.subscribe(req2)\nPubSubSubscription resp3 = pool.subscribe(req3)\n\n// Later, can unsubscribe from any\npool.unsubscribe(resp2);\n")))),(0,i.kt)("p",null,"A more concrete example of this can be found ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/twitch4j/twitch4j/blob/master/pubsub/src/test/java/com/github/twitch4j/pubsub/PooledTwitchPubSubTest.java"},"here"),"."))}d.isMDXComponent=!0}}]);