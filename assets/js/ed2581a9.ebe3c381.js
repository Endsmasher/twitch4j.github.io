"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2928],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=i.createContext({}),c=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},u=function(e){var t=c(e.components);return i.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=c(n),m=a,f=d["".concat(s,".").concat(m)]||d[m]||p[m]||o;return n?i.createElement(f,r(r({ref:t},u),{},{components:n})):i.createElement(f,r({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,r=new Array(o);r[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,r[1]=l;for(var c=2;c<o;c++)r[c]=n[c];return i.createElement.apply(null,r)}return i.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.r(t),n.d(t,{default:()=>r});var i=n(7294),a=n(6010);const o="tabItem_Ymn6";function r(e){let{children:t,hidden:n,className:r}=e;return i.createElement("div",{role:"tabpanel",className:(0,a.Z)(o,r),hidden:n},t)}},5488:(e,t,n)=>{n.r(t),n.d(t,{default:()=>m});var i=n(7462),a=n(7294),o=n(6010),r=n(2389),l=n(7392),s=n(7094),c=n(2466);const u="tabList__CuJ",p="tabItem_LNqP";function d(e){var t,n;const{lazy:r,block:d,defaultValue:m,values:f,groupId:v,className:b}=e,h=a.Children.map(e.children,(e=>{if((0,a.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),g=null!=f?f:h.map((e=>{let{props:{value:t,label:n,attributes:i}}=e;return{value:t,label:n,attributes:i}})),y=(0,l.l)(g,((e,t)=>e.value===t.value));if(y.length>0)throw new Error('Docusaurus error: Duplicate values "'+y.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const k=null===m?m:null!=(t=null!=m?m:null==(n=h.find((e=>e.props.default)))?void 0:n.props.value)?t:h[0].props.value;if(null!==k&&!g.some((e=>e.value===k)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+k+'" but none of its children has the corresponding value. Available values are: '+g.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:N,setTabGroupChoices:w}=(0,s.U)(),[E,C]=(0,a.useState)(k),O=[],{blockElementScrollPositionUntilNextRender:T}=(0,c.o5)();if(null!=v){const e=N[v];null!=e&&e!==E&&g.some((t=>t.value===e))&&C(e)}const I=e=>{const t=e.currentTarget,n=O.indexOf(t),i=g[n].value;i!==E&&(T(t),C(i),null!=v&&w(v,String(i)))},S=e=>{var t;let n=null;switch(e.key){case"Enter":I(e);break;case"ArrowRight":{var i;const t=O.indexOf(e.currentTarget)+1;n=null!=(i=O[t])?i:O[0];break}case"ArrowLeft":{var a;const t=O.indexOf(e.currentTarget)-1;n=null!=(a=O[t])?a:O[O.length-1];break}}null==(t=n)||t.focus()};return a.createElement("div",{className:(0,o.Z)("tabs-container",u)},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":d},b)},g.map((e=>{let{value:t,label:n,attributes:r}=e;return a.createElement("li",(0,i.Z)({role:"tab",tabIndex:E===t?0:-1,"aria-selected":E===t,key:t,ref:e=>O.push(e),onKeyDown:S,onClick:I},r,{className:(0,o.Z)("tabs__item",p,null==r?void 0:r.className,{"tabs__item--active":E===t})}),null!=n?n:t)}))),r?(0,a.cloneElement)(h.filter((e=>e.props.value===E))[0],{className:"margin-top--md"}):a.createElement("div",{className:"margin-top--md"},h.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==E})))))}function m(e){const t=(0,r.Z)();return a.createElement(d,(0,i.Z)({key:String(t)},e))}},6958:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>m,frontMatter:()=>l,metadata:()=>c,toc:()=>p});var i=n(7462),a=(n(7294),n(3905)),o=n(5488),r=n(5162);const l={sidebar_position:50},s="Topic - Onsite Notifications",c={unversionedId:"pubsub/topic-onsite-notifications",id:"version-1.x/pubsub/topic-onsite-notifications",title:"Topic - Onsite Notifications",description:"Description",source:"@site/versioned_docs/version-1.x/pubsub/topic-onsite-notifications.mdx",sourceDirName:"pubsub",slug:"/pubsub/topic-onsite-notifications",permalink:"/pubsub/topic-onsite-notifications",draft:!1,editUrl:"https://github.com/twitch4j/twitch4j.github.io/tree/master/docs/versioned_docs/version-1.x/pubsub/topic-onsite-notifications.mdx",tags:[],version:"1.x",lastUpdatedBy:"Philipp Heuer",lastUpdatedAt:1660511578,formattedLastUpdatedAt:"Aug 14, 2022",sidebarPosition:50,frontMatter:{sidebar_position:50},sidebar:"version-1.x-docs",previous:{title:"Topic - Moderation Events",permalink:"/pubsub/topic-moderation-events"},next:{title:"Topic - Poll Events",permalink:"/pubsub/topic-poll-events"}},u={},p=[{value:"Description",id:"description",level:2},{value:"Method Definition",id:"method-definition",level:2},{value:"Code-Snippets",id:"code-snippets",level:2},{value:"Example: General use",id:"example-general-use",level:3},{value:"Example: Live status monitoring",id:"example-live-status-monitoring",level:3}],d={toc:p};function m(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,i.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"topic---onsite-notifications"},"Topic - Onsite Notifications"),(0,a.kt)("h2",{id:"description"},"Description"),(0,a.kt)("p",null,"This topic can be used to monitor notifications that would occur on the twitch website (e.g. if a stream goes live)."),(0,a.kt)("p",null,"With all undocumented topics, use at your own risk."),(0,a.kt)("h2",{id:"method-definition"},"Method Definition"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Name"),(0,a.kt)("th",{parentName:"tr",align:"center"},"Type"),(0,a.kt)("th",{parentName:"tr",align:"right"},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"credential"),(0,a.kt)("td",{parentName:"tr",align:"center"},"OAuth2Credential"),(0,a.kt)("td",{parentName:"tr",align:"right"},"User Auth Token for the target user id")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"userId"),(0,a.kt)("td",{parentName:"tr",align:"center"},"String"),(0,a.kt)("td",{parentName:"tr",align:"right"},"Target User Id")))),(0,a.kt)("h2",{id:"code-snippets"},"Code-Snippets"),(0,a.kt)("h3",{id:"example-general-use"},"Example: General use"),(0,a.kt)("p",null,"Subscribe to all onsite notifications for user ",(0,a.kt)("inlineCode",{parentName:"p"},"twitch4j")," and register listeners that print all messages to console"),(0,a.kt)(o.default,{groupId:"code",mdxType:"Tabs"},(0,a.kt)(r.default,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'// Subscribe to the topic\ntwitchClient.getPubSub().listenForOnsiteNotificationEvents(credential, "149223493");\n\n// Listen to notification creations\ntwitchClient.getEventManager().onEvent(OnsiteNotificationCreationEvent.class, System.out::println);\n\n// Listen for notification summary updates\ntwitchClient.getEventManager().onEvent(UpdateOnsiteNotificationSummaryEvent.class, System.out::println);\n'))),(0,a.kt)(r.default,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'// Subscribe to the topic\ntwitchClient.pubSub.listenForOnsiteNotificationEvents(credential, "149223493");\n\n// Listen to notification creations\ntwitchClient.eventManager.onEvent(OnsiteNotificationCreationEvent::class.java, System.out::println);\n\n// Listen for notification summary updates\ntwitchClient.eventManager.onEvent(UpdateOnsiteNotificationSummaryEvent::class.java, System.out::println);\n'))),(0,a.kt)(r.default,{value:"groovy",label:"Groovy",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-groovy"},'// Subscribe to the topic\ntwitchClient.pubSub.listenForOnsiteNotificationEvents(credential, "149223493");\n\n// Listen to notification creations\ntwitchClient.eventManager.onEvent(OnsiteNotificationCreationEvent, System.out::println);\n\n// Listen for notification summary updates\ntwitchClient.eventManager.onEvent(UpdateOnsiteNotificationSummaryEvent, System.out::println);\n')))),(0,a.kt)("h3",{id:"example-live-status-monitoring"},"Example: Live status monitoring"),(0,a.kt)("p",null,"Note: a single channel can be following up to 2000 channels, as of the time of writing. Such events cannot be fired unless the notifications bell is enabled for the channel."),(0,a.kt)("p",null,"Note: these notifications tend to be fired faster than repeatedly querying API - Helix > Streams Get, as ",(0,a.kt)("inlineCode",{parentName:"p"},"TwitchClientHelper")," (Twitch4J > Client Helper) does."),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("strong",{parentName:"p"},"Disclaimer"),": Do not solely rely upon this code; fallback mechanisms should be employed as well.")),(0,a.kt)(o.default,{groupId:"code",mdxType:"Tabs"},(0,a.kt)(r.default,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'// Establish which channels\' live state is relevant\nSet<String> interestedChannelIds = new HashSet<>();\ninterestedChannelIds.add("12826");\ninterestedChannelIds.add("53888434");\ninterestedChannelIds.add("141981764");\ninterestedChannelIds.add("142621956");\n\n// Subscribe to the topic\ntwitchClient.getPubSub().listenForOnsiteNotificationEvents(credential, userId);\n\n// Listen to notification creations\ntwitchClient.getEventManager().onEvent(OnsiteNotificationCreationEvent.class, e -> {\n    OnsiteNotification notification = e.getData().getNotification();\n    if (notification.getType().equalsIgnoreCase("streamup")) {\n        List<OnsiteNotification.Creator> creators = notification.getCreators();\n        if (creators != null && creators.size() == 1 && interestedChannelIds.contains(creators.get(0).getUserId())) {\n            System.out.println(e); // Handle Go Live\n        }\n    }\n});\n'))),(0,a.kt)(r.default,{value:"kotlin",label:"Kotlin",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'// Establish which channels\' live state is relevant\nval interestedChannelIds = setOf("12826", "53888434", "141981764", "142621956")\n\n// Subscribe to the topic\ntwitchClient.pubSub.listenForOnsiteNotificationEvents(credential, userId);\n\n// Listen to notification creations\ntwitchClient.eventManager.onEvent(OnsiteNotificationCreationEvent::class.java) { e ->\n    val notification = e.`data`.notification;\n    if (notification.type.equals("streamup", true)) {\n        notification.creators?.apply {\n            if (size == 1 && interestedChannelIds.contains(get(0).userId) {\n                println(e); // Handle Go Live\n            }\n        }\n    }\n}\n'))),(0,a.kt)(r.default,{value:"groovy",label:"Groovy",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-groovy"},'// Establish which channels\' live state is relevant\ndef interestedChannelIds = new HashSet<>()\ninterestedChannelIds.add("12826")\ninterestedChannelIds.add("53888434")\ninterestedChannelIds.add("141981764")\ninterestedChannelIds.add("142621956")\n\n// Subscribe to the topic\ntwitchClient.pubSub.listenForOnsiteNotificationEvents(credential, userId)\n\n// Listen to notification creations\ntwitchClient.eventManager.onEvent(OnsiteNotificationCreationEvent) { e ->\n    def notification = e.data.notification\n    if (notification.type.equalsIgnoreCase("streamup")) {\n        def creators = notification.creators\n        if (creators != null && creators.size() == 1 && interestedChannelIds.contains(creators[0].userId)) {\n            System.out.println(e) // Handle Go Live\n        }\n    }\n}\n')))))}m.isMDXComponent=!0}}]);